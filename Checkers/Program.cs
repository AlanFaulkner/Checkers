using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Checkers
{
    internal class Program
    {
        public static void EvolveNetworks(int NumberOfGenes, List<int> GeneDescription,int NumberOfGenerations,double MutationRate)
        {
            // ############################################
            // ## Evolve Neural network to play checkers ##
            // ############################################

            Console.Write("Evolving " + NumberOfGenes + " neural networks to play checkers using the follwoing settings:\n\nNetwork Description: ");
            for(int i = 0; i < GeneDescription.Count; i++)
            {
                Console.Write(GeneDescription[i] + " ");
            }
            Console.WriteLine("\nMutation rate: " + (MutationRate * 100) + "%\nTotal number of generation: " + NumberOfGenerations + "\n");

            Evolve_NN_Evaluator evolve = new Evolve_NN_Evaluator(NumberOfGenes, GeneDescription, NumberOfGenerations, MutationRate);
            //evolve.LoadGenePool();  // This will overwrite gene pool with exisiting set of genes its kinda hacky and error prone but allows for continued evolution of genes generated by this code
            var time = System.Diagnostics.Stopwatch.StartNew();

            evolve.EvolvePlayer();

            time.Stop();
            TimeSpan t = TimeSpan.FromMilliseconds(time.ElapsedMilliseconds);
            string answer = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                                    t.Hours,
                                    t.Minutes,
                                    t.Seconds,
                                    t.Milliseconds);

            Console.Write("\nEvolution complete\n\nTotal time taken: " + answer);
            Console.WriteLine("\nSaving the current best neueral network player as: NeuralNetPlayer.net");
            evolve.GenePool[0].Save_Network("NeuralNetPlayer.net");
        }

        public static void TrainNetworksUsingReinforcementLearning(string Player1_NeuralNet_Filename, string Player2_NeuralNet_Filename, int NumberOfGamesToPlay)
        {
            // ##############################################################################
            // ## Improve best neural network againsts itself using reinforcement learning ##
            // ##############################################################################
            
            CheckersGamePlay Game = new CheckersGamePlay();
            Game.SetPlayer1 = 3;
            Game.SetPlayer2 = 3;

            // Load relevent networks
            NN_Evaluator Player1_NeuralNet = new NN_Evaluator();
            Player1_NeuralNet.Load_Network(Player1_NeuralNet_Filename);
            var NN1 = Game.Player1Type[3] as NN_ReinforcmentLearning;
            NN1.SetNeuralNetwork = Player1_NeuralNet;
            NN1.EnableTraining = true;

            NN_Evaluator Player2_NeuralNet = new NN_Evaluator();
            Player2_NeuralNet.Load_Network(Player2_NeuralNet_Filename);
            var NN2 = Game.Player2Type[3] as NN_ReinforcmentLearning;
            NN2.EnableTraining = true;
            NN2.SetNeuralNetwork = Player2_NeuralNet;

            Console.WriteLine("Training Neural Net using reinforcment learning\n\nPlayer 1 Network = " + Player1_NeuralNet_Filename + "\nPlayer 2 Network = " + Player2_NeuralNet_Filename + "\n\nTotal number of games used int training = " + NumberOfGamesToPlay + "\n");

            // Train network

            var time = System.Diagnostics.Stopwatch.StartNew();

            for (int i = 0; i < NumberOfGamesToPlay; i++)
            {
                Game.PlayGame();
                if (Game.GetCurrentPlayer == 1)
                {
                    NN1.Train_Neural_Network("Win", Player1_NeuralNet_Filename);
                    NN2.Train_Neural_Network("Loose", Player2_NeuralNet_Filename);
                }
                else
                {
                    NN1.Train_Neural_Network("Loose", Player1_NeuralNet_Filename);
                    NN2.Train_Neural_Network("Win", Player2_NeuralNet_Filename);
                }

                Console.WriteLine("Games Played so far = " + (i + 1));
                Console.SetCursorPosition(0, Console.CursorTop - 1);
            }

            time.Stop();

            Console.WriteLine("Training Complete");

            TimeSpan t = TimeSpan.FromMilliseconds(time.ElapsedMilliseconds);
            string answer = string.Format("{0:D2}h:{1:D2}m:{2:D2}s:{3:D3}ms",
                                    t.Hours,
                                    t.Minutes,
                                    t.Seconds,
                                    t.Milliseconds);
            Console.WriteLine("\nTotal time taken = " + answer);
        }

        private static void Main(string[] args)
        {
            List<int> GeneDescription = new List<int> { 32, 40, 10, 1 };

            // Generate a successful network
            EvolveNetworks(40, GeneDescription, 1000, 0.05);

            // Improve Network
            TrainNetworksUsingReinforcementLearning("NeuralNetPlayer.net", "NeuralNetPlayer.net", 1000000);

            // UI application to phyically play game and test neural network.
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new User_Interface());

        }
    }
}